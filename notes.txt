Author: Alexis Tercero

github: https://github.com/AlexisTercero55
email: alexistercero55@gmail.com

Refernce: "Three.js Essentials" Jos Dirksen
ISBN: 978-1-78398-086-4
Current page: 

Conventions:

    //# any iusses notes

why requestAnimationFrame()?

With the requestAnimationFrame function, we tell
the browser to determine when it thinks it is best to call the supplied function (the
render function in this case). This way, we can offload the graphical rendering of the
scene from the normal JavaScript thread; this provides a much smoother experience
and better performance.

HOW WORKS dat.gui?  <----------------//#

HOW WORKS stats.js?

we need to configure what KIND OF STATISTICS WE WANT to show and where to
show them. This is described in the following code:

    function addStatsObject() 
    {
        stats = new Stats();
        stats.setMode(0);   // 0: fps, 1: ms                      
        stats.domElement.style.position = 'absolute';   
        stats.domElement.style.left = '0px';            
        stats.domElement.style.top = '0px';             
        document.body.appendChild( stats.domElement );  
    }                                                   
                                                        
Stats.js supports two modes:

    Mode 0, which we will use here, 
    shows the frames per second (FPS). 
    
    Mode to 1, we will see the number of 
    milliseconds needed to render the frame.


Sphere geometry constructor argumets:

    THREE.SphereGeometry(15, 30, 30);

    • The radius of the sphere
    • The number of width segments
    • The number of height segments

THREE.MeshNormalMaterial(). 
    With this material, the color of a mesh isn't 
    determined by lighting, but is determined by
    its normal vector, or in other words, by the 
    angle of the face. This is a good material
    to use when you're testing the position of 
    your camera, the way the geometry looks,
    and whether the scene is initialized correctly.

THREE.MeshBasicMaterial();
    MeshBasicMaterial object,
    a material that doesn't change 
    the way it looks according to light sources.

THREE.ImageUtils.loadTexture('images/earth.jpg');
    Load an image and return a texture
    that THREE can use.

THREE.materialObject.map = THREE.ImageUtils.loadTexture('images/earth.jpg');
    This is how we set the texture of the material.

    materialObject -> THREE.MeshBasicMaterial