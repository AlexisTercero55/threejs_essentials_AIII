Author: Alexis Tercero

github: https://github.com/AlexisTercero55
email: alexistercero55@gmail.com

Refernce: "Three.js Essentials" Jos Dirksen
ISBN: 978-1-78398-086-4
Current page: 42

Conventions:

    //# any iusses notes

//////////////////////////////////////////////////////////////////////////////////////////////
CHAPTER 1:

why requestAnimationFrame()?

With the requestAnimationFrame function, we tell
the browser to determine when it thinks it is best to call the supplied function (the
render function in this case). This way, we can offload the graphical rendering of the
scene from the normal JavaScript thread; this provides a much smoother experience
and better performance.

HOW WORKS dat.gui?  <----------------//#

HOW WORKS stats.js?

we need to configure what KIND OF STATISTICS WE WANT to show and where to
show them. This is described in the following code:

    function addStatsObject() 
    {
        stats = new Stats();
        stats.setMode(0);   // 0: fps, 1: ms                      
        stats.domElement.style.position = 'absolute';   
        stats.domElement.style.left = '0px';            
        stats.domElement.style.top = '0px';             
        document.body.appendChild( stats.domElement );  
    }                                                   
                                                        
Stats.js supports two modes:

    Mode 0, which we will use here, 
    shows the frames per second (FPS). 
    
    Mode to 1, we will see the number of 
    milliseconds needed to render the frame.


Sphere geometry constructor argumets:

    THREE.SphereGeometry(15, 30, 30);

    • The radius of the sphere
    • The number of width segments
    • The number of height segments

THREE.MeshNormalMaterial(). 
    With this material, the color of a mesh isn't 
    determined by lighting, but is determined by
    its normal vector, or in other words, by the 
    angle of the face. This is a good material
    to use when you're testing the position of 
    your camera, the way the geometry looks,
    and whether the scene is initialized correctly.

THREE.MeshBasicMaterial();
    MeshBasicMaterial object,
    a material that doesn't change 
    the way it looks according to light sources.

THREE.ImageUtils.loadTexture('images/earth.jpg');
    Load an image and return a texture
    that THREE can use.

THREE.materialObject.map = THREE.ImageUtils.loadTexture('images/earth.jpg');
    This is how we set the texture of the material.

    materialObject -> THREE.MeshBasicMaterial

THREE.OrbitControls( object : Camera, domElement : HTMLDOMElement )

    LINK: https://threejs.org/docs/#examples/en/controls/OrbitControls

    object: (required) The camera to be controlled. 
            The camera must not be a child of another 
            object, unless that object is the scene itself.

    domElement: The HTML element used for event listeners.

    |Control | Action |
    |--------|--------|
    |Left    | mouse button and move Rotate and roll the camera around the scene |
    |Scroll  | wheel Zoom in and zoom out |
    |Middle  | mouse button and move Zoom in and zoom out |
    |Right   | mouse button and move Pan around the scene |
    |--------|--------|
//////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////
CHAPTER 2:

 •  When you add a lot of meshes to a scene, the performance will suffer.
    Three.js allows you to combine multiple geometries with a single geometry
    to improve performance. We'll demonstrate how to do this.

 •  The normal way to render a scene is to call the render() function on the
    renderer. There is, however, also a different approach through which we can
    create various render or effect steps and combine these together. We'll show
    how you can configure and use this alternative rendering approach.


USE IMAGES AS TEXTURE MATERIAL IN THREE.JS (BASIC PROCESS)
    PP: 46

    This is described in the following code:

        function createEarthMaterial() 
        {
            // 4096 is the MAXIMUM WIDTH FOR MAPS
            var earthTexture = THREE.ImageUtils.loadTexture(
            "../assets/textures/planets/earthmap4k.jpg");
            var earthMaterial = new THREE.MeshBasicMaterial();
            earthMaterial.map = earthTexture;
            return earthMaterial;
        }
        
    In the createEarthMaterial function, we create MeshBasicMaterial object, a
    material that doesn't change the way it looks according to light sources. Before we
    can use an image as a texture, we first need to load it. We can do this by using the
    THREE.ImageUtils.loadTexture function, which loads the image asynchronously.
    The final step that we need to do is set the map property of the material to the texture
    we just created.

ADDING DIRECTIONAL AND AMBIENT LIGHTING
    Three.js offers a number of different types of light. The following table shows the
    most important lights that are available:

    NAME                DESCRIPTION
    AmbientLight        A simple light whose color is added to the color of an
                        object's material.

    PointLight          A single point in space that emanates light evenly in all
                        directions.

    SpotLight           A light with a cone effect, for instance, a spot in the ceiling
                        or a torch.

    DirectionalLight    A light that acts like a very remote light source. All light
                        rays run parallel to each other. The sun, for instance,
                        can be seen as an infinite source of light.

//////////////////////////////////////////////////////////////////////////////////////////////